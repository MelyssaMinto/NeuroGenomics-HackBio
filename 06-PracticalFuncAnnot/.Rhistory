data.frame(GEO_Accesion =labels(dend))%>%
left_join(metadata)
metadata
data.frame(GEO_Accession =labels(dend))%>%
left_join(metadata)
metadata$Treatment[ metadata$GEO_Accession %in% labels(dend)]
metadata$Treatment
metadata$GEO_Accession
labels(dend)
metadata$Treatment = as.character(metadata$Treatment)
metadata$Treatment[ metadata$GEO_Accession %in% labels(dend)]
l = metadata$Treatment[ metadata$GEO_Accession %in% labels(dend)]
dend %>%
set("labels", l) %>%
plot
mat.pca<-prcomp(t(mat)) #perform PCA
summary(mat.pca)
corr.mat<-round(cor(mat),2)
corrplot(corr.mat, type = "upper", tl.col = "black", tl.srt = 45)
resultsNames(dds)
library(tidyverse)
library(DESeq2)
library(edgeR)
library(reshape2)
library(dendextend)
# importing the metadata from the paper
SraRunTable <- read_csv("../data/SraRunTable.txt")
# cleaning the column names
colnames(SraRunTable) = gsub(" \\(exp\\)", "", colnames(SraRunTable))
# swapping out "-" and "+" for "minus" and "plus" becuase it will throw errors otherwise
SraRunTable$Cell_type = gsub("-", "_minus", SraRunTable$Cell_type)
SraRunTable$Cell_type = gsub("\\+", "_plus", SraRunTable$Cell_type)
head(SraRunTable)
# importing the metadata from the paper
SraRunTable <- read_csv("../data/SraRunTable.txt")
# cleaning the column names
colnames(SraRunTable) = gsub(" \\(exp\\)", "", colnames(SraRunTable))
# swapping out "-" and "+" for "minus" and "plus" becuase it will throw errors otherwise
SraRunTable$Cell_type = gsub("-", "_minus", SraRunTable$Cell_type)
SraRunTable$Cell_type = gsub("\\+", "_plus", SraRunTable$Cell_type)
head(SraRunTable)
# getting the list of all count files
file_list <- list.files(path="../data/counts", full.names = T)
file_list
# extracting the GEO accession number for experiment identifier
accession = gsub('^.*../data/counts/\\s*|\\_.*$', '', file_list)
accession
# reading in the gene list from the first count file
genes <- read.table(file_list[1], header=FALSE, sep="\t")[,1]
genes
# reading in the counts from all the files
counts    <- do.call(cbind,lapply(file_list,function(fn)read.table(fn,header=FALSE, sep="\t")[,2]))
counts
colnames(counts) = accession
counts = data.frame(SYMBOL=genes,
counts)
head(counts)
tail(counts)
# filter out the htseq stats
counts = counts[!c(grepl("__no_feature", counts$SYMBOL)|
grepl("__ambiguous", counts$SYMBOL)|
grepl("__too_low_aQual", counts$SYMBOL)|
grepl("__not_aligned", counts$SYMBOL)|
grepl("__alignment_not_unique", counts$SYMBOL)), ]
tail(counts)
library(tidyverse)
library(DESeq2)
library(edgeR)
library(reshape2)
library(dendextend)
# importing the metadata from the paper
SraRunTable <- read_csv("../data/SraRunTable.txt")
View(SraRunTable)
# cleaning the column names
colnames(SraRunTable) = gsub(" \\(exp\\)", "", colnames(SraRunTable))
View(SraRunTable)
# swapping out "-" and "+" for "minus" and "plus" becuase it will throw errors otherwise
SraRunTable$Cell_type = gsub("-", "_minus", SraRunTable$Cell_type)
SraRunTable$Cell_type = gsub("\\+", "_plus", SraRunTable$Cell_type)
head(SraRunTable)
# getting the list of all count files
file_list <- list.files(path="../data/counts", full.names = T)
file_list
# reading in the gene list from the first count file
genes <- read.table(file_list[1], header=FALSE, sep="\t")[,1]
genes
# reading in the counts from all the files
counts    <- do.call(cbind,lapply(file_list,function(fn)read.table(fn,header=FALSE, sep="\t")[,2]))
counts
file_list
# extracting the GEO accession number for experiment identifier
accession = gsub('^.*../data/counts/\\s*|\\_.*$', '', file_list)
accession
colnames(counts) = accession
counts
counts = data.frame(SYMBOL=genes,
counts)
head(counts)
tail(counts)
# filter out the htseq stats
counts = counts[!c(grepl("__no_feature", counts$SYMBOL)|
grepl("__ambiguous", counts$SYMBOL)|
grepl("__too_low_aQual", counts$SYMBOL)|
grepl("__not_aligned", counts$SYMBOL)|
grepl("__alignment_not_unique", counts$SYMBOL)), ]
tail(counts)
# adding read depths to metadata
metadata = data.frame(GEO_Accession = accession,
depth = colSums(counts[,2:ncol(counts)]) ) %>%
left_join(SraRunTable)
metadata
View(metadata)
metadata$source_name
##--edgeR--##
# create edgeR object
dgList <- DGEList(counts=counts[,-1],
genes=counts$SYMBOL,
group = metadata$source_name
)
countsPerMillion <- cpm(dgList)
summary(countsPerMillion)
countCheck <- countsPerMillion > 1
head(countCheck)
# filter based on counts per million
keep <- which(rowSums(countCheck) >= 10)
dgList <- dgList[keep,]
genes.filt = genes[keep]
length(genes.filt)
##-- switching over to DESeq2--#
counts_filt = dgList$counts
dds<-DESeqDataSetFromMatrix(countData = counts_filt,
colData = metadata,
design = ~ Cell_type + Treatment )
dds<-DESeq(dds)
# Getting deseq results
HomeCagevNonShock= results(dds, contrast = c("Treatment", "HomeCage", "Non Shock"), tidy = TRUE)
FearCondvNonShock= results(dds, contrast = c("Treatment", "Fear Conditioned", "Non Shock"), tidy = TRUE)
FearCondvHomeCage= results(dds, contrast = c("Treatment", "Fear Conditioned", "HomeCage"), tidy = TRUE)
HomeCagevNonShock
# reformatting results
pval=.05
lfc=1.5
# Home cage v Non Shock treatment
HomeCagevNonShock = HomeCagevNonShock %>%
mutate(sig = ifelse(log2FoldChange > lfc & padj < pval, "UP", (ifelse(log2FoldChange < -lfc & padj < pval, "DOWN", "not sig")) )) %>%
mutate(SYMBOL=genes.filt)
head(HomeCagevNonShock)
table(HomeCagevNonShock$sig)
HomeCagevNonShock$SYMBOL[!(HomeCagevNonShock$sig %in% "not sig")]
# non shock v Fear conditioned
FearCondvNonShock <- FearCondvNonShock %>%
mutate(sig = ifelse(log2FoldChange > lfc & padj < pval, "UP", (ifelse(log2FoldChange < -lfc & padj < pval, "DOWN", "not sig")) ))%>%
mutate(SYMBOL=genes.filt)
table(FearCondvNonShock$sig)
# home cage v fear conditioned
FearCondvHomeCage <- FearCondvHomeCage %>%
mutate(sig = ifelse(log2FoldChange > lfc & padj < pval, "UP", (ifelse(log2FoldChange < -lfc & padj < pval, "DOWN", "not sig")) ))%>%
mutate(SYMBOL=genes.filt)
table(FearCondvHomeCage$sig)
save.image("DIffExpResults.RData")
library(tidyverse)
library(DESeq2)
library(edgeR)
library(reshape2)
library(dendextend)
load("../02-PracticalDiffExp/DIffExpResults.RData")
setwd("~/WL/NeuroGenomics-HackBio/03-PracticalFuncAnnot")
load("../02-PracticalDiffExp/DIffExpResults.RData")
load("~/WL/NeuroGenomics-HackBio/02-PracticalDiffExp/scripts/DIffExpResults.RData")
metadata
metadata %>%
mutate(comp = case_when( Treatment %in% c("Fear Conditioned") ~ "Fear Conditioned"),
Treatment %in% c("HomeCage", "Non Shock") ~ "Control")
metadata %>%
mutate(comp = case_when(
Treatment %in% c("Fear Conditioned") ~ "Fear Conditioned"),
Treatment %in% c("HomeCage", "Non Shock") ~ "Control")
metadata %>%
mutate(comp = case_when(
Treatment %in% c("Fear Conditioned") ~ "Fear Conditioned",
Treatment %in% c("HomeCage", "Non Shock") ~ "Control")
)
dds<-DESeqDataSetFromMatrix(countData = counts_filt,
colData = metadata,
design = ~ Comp )
```{r}
metadata =
metadata %>%
mutate(comp = case_when(
Treatment %in% c("Fear Conditioned") ~ "Fear Conditioned",
Treatment %in% c("HomeCage", "Non Shock") ~ "Control")
)
metadata
dds<-DESeqDataSetFromMatrix(countData = counts_filt,
colData = metadata,
design = ~ Comp )
dds<-DESeqDataSetFromMatrix(countData = counts_filt,
colData = metadata,
design = ~ comp )
View(HomeCagevNonShock)
vsd <- vst(dds, blind =FALSE)
mat <-assay(vsd)
head(as.data.frame(mat))
dend = t(mat) %>%
scale %>%
dist %>%
hclust %>%
as.dendrogram
l = metadata$Treatment[ metadata$GEO_Accession %in% labels(dend)]
dend %>%
set("labels", l) %>%
plot
dend = t(mat) %>%
scale %>%
dist %>%
hclust %>%
as.dendrogram
l = metadata$comp[ metadata$GEO_Accession %in% labels(dend)]
dend %>%
set("labels", l) %>%
plot
mat.pca<-prcomp(t(mat)) #perform PCA
summary(mat.pca)
#Extract PCA scrores
scores <-as.data.frame(mat.pca$x)
scores
scores %>%
mutate(GEO_Accession = rownames(scores)) %>%
left_join(metadata) %>%
ggplot(aes(PC1, PC2, color = comp))+
geom_point()
scores %>%
mutate(GEO_Accession = rownames(scores)) %>%
left_join(metadata) %>%
ggplot(aes(PC1, PC2, color = Cell_type))+
geom_point()
# Getting deseq results
FearCondvControl= results(dds, contrast = c("Treatment", "Fear Conditioned", "Control"), tidy = TRUE)
# Getting deseq results
FearCondvControl= results(dds, contrast = c("comp", "Fear Conditioned", "Control"), tidy = TRUE)
dds<-DESeq(dds)
dds<-DESeqDataSetFromMatrix(countData = counts_filt,
colData = metadata,
design = ~ comp + Cell_type)
dds<-DESeq(dds)
vsd <- vst(dds, blind =FALSE)
mat <-assay(vsd)
head(as.data.frame(mat))
dend = t(mat) %>%
scale %>%
dist %>%
hclust %>%
as.dendrogram
l = metadata$comp[ metadata$GEO_Accession %in% labels(dend)]
dend %>%
set("labels", l) %>%
plot
mat.pca<-prcomp(t(mat)) #perform PCA
summary(mat.pca)
#Extract PCA scrores
scores <-as.data.frame(mat.pca$x)
scores
scores %>%
mutate(GEO_Accession = rownames(scores)) %>%
left_join(metadata) %>%
ggplot(aes(PC1, PC2, color = comp))+
geom_point()
scores %>%
mutate(GEO_Accession = rownames(scores)) %>%
left_join(metadata) %>%
ggplot(aes(PC1, PC2, color = Cell_type))+
geom_point()
# Getting deseq results
FearCondvControl= results(dds, contrast = c("comp", "Fear Conditioned", "Control"), tidy = TRUE)
# reformatting results
pval=.05
lfc=1.5
# Home cage v Non Shock treatment
FearCondvControl =
FearCondvControl %>%
mutate(sig = ifelse(log2FoldChange > lfc & padj < pval, "UP", (ifelse(log2FoldChange < -lfc & padj < pval, "DOWN", "not sig")) )) %>%
mutate(SYMBOL=genes.filt)
head(FearCondvControl)
table(FearCondvControl$sig)
FearCondvControl$SYMBOL[!(FearCondvControl$sig %in% "not sig")]=
FearCondvControl$SYMBOL[!(FearCondvControl$sig %in% "not sig")]=
FearCondvControl$SYMBOL[!(FearCondvControl$sig %in% "not sig")]
resultsNames(dds)
dVenusPlusvMinus= results(dds, contrast = c("Cell_type", "dVenus_plus", "dVenus_minus"), tidy = TRUE)
dVenusPlusvMinus =
dVenusPlusvMinus %>%
mutate(sig = ifelse(log2FoldChange > lfc & padj < pval, "UP", (ifelse(log2FoldChange < -lfc & padj < pval, "DOWN", "not sig")) )) %>%
mutate(SYMBOL=genes.filt)
head(dVenusPlusvMinus)
table(dVenusPlusvMinus)
table(dVenusPlusvMinus$sig)
dVenusPlusvMinus$SYMBOL[!(dVenusPlusvMinus$sig %in% "not sig")]
library(TxDb.Mmusculus.UCSC.mm10.knownGene)
BiocManager::install("TxDb.Mmusculus.UCSC.mm10.knownGene")
BiocManager::install("org.Mm.eg.db")
BiocManager::install("clusterProfiler")
BiocManager::install("ReactomePA")
install.packages("WGCNA")
GOI = FearCondvControl$SYMBOL[!(FearCondvControl$sig %in% "UP")]
# converting IDs
gene.df = bitr(GOI, fromType = "SYMBOL", toType = c("ENSEMBL", "SYMBOL", "ENTREZID"), OrgDb = org.Mm.eg.db)
library(TxDb.Mmusculus.UCSC.mm10.knownGene)
library(org.Mm.eg.db)
library(clusterProfiler)
library(ReactomePA)
library(WGCNA)
GOI = FearCondvControl$SYMBOL[!(FearCondvControl$sig %in% "UP")]
# converting IDs
gene.df = bitr(GOI, fromType = "SYMBOL", toType = c("ENSEMBL", "SYMBOL", "ENTREZID"), OrgDb = org.Mm.eg.db)
gene.df
#Getting enticements
GO_CC =  enrichGO(gene = gene.df$ENSEMBL,
OrgDb = org.Mm.eg.db,
keyType = "ENSEMBL",
ont = "CC",
pAdjustMethod = "BH",
pvalueCutoff = 0.01,
qvalueCutoff = 0.05)
goplot(GO_CC)
GO_BP =  enrichGO(gene = gene.df$ENSEMBL,
OrgDb = org.Mm.eg.db,
keyType = "ENSEMBL",
ont = "BP",
pAdjustMethod = "BH",
pvalueCutoff = 0.01,
qvalueCutoff = 0.05)
goplot(GO_CC)
goplot(GO_BP)
GO_BP =  enrichGO(gene = gene.df$ENSEMBL,
OrgDb = org.Mm.eg.db,
keyType = "ENSEMBL",
ont = "BP",
pAdjustMethod = "BH",
pvalueCutoff = 0.01,
qvalueCutoff = 0.05)
goplot(GO_BP)
GO_MF =  enrichGO(gene = gene.df$ENSEMBL,
OrgDb = org.Mm.eg.db,
keyType = "ENSEMBL",
ont = "MF",
pAdjustMethod = "BH",
pvalueCutoff = 0.01,
qvalueCutoff = 0.05)
goplot(GO_MF)
pathway = enrichPathway(gene.df$ENTREZID ,
organism = "mouse",
pAdjustMethod = "BH",
pvalueCutoff = 0.01,
readable=TRUE)
as.data.frame(pathway) %>%
ggplot(aes(y =Description, x=p.adjust, fill = p.adjust))+
geom_col() +
theme_bw()
as.data.frame(pathway) %>%
ggplot(aes(y =Description, x=p.adjust, fill = p.adjust))+
geom_col() +
theme_bw()
as.data.frame(pathway)
GOI = FearCondvControl$SYMBOL[!(FearCondvControl$sig %in% "UP")]
GOI = FearCondvControl$SYMBOL[FearCondvControl$sig %in% "UP"]
# converting IDs
gene.df = bitr(GOI, fromType = "SYMBOL", toType = c("ENSEMBL", "SYMBOL", "ENTREZID"), OrgDb = org.Mm.eg.db)
gene.df
#GO Enrichemnt - Cellular Component
GO_CC =  enrichGO(gene = gene.df$ENSEMBL,
OrgDb = org.Mm.eg.db,
keyType = "ENSEMBL",
ont = "CC",
pAdjustMethod = "BH",
pvalueCutoff = 0.01,
qvalueCutoff = 0.05)
goplot(GO_CC)
GO_CC
# GO enrichment - Biological Process
GO_BP =  enrichGO(gene = gene.df$ENSEMBL,
OrgDb = org.Mm.eg.db,
keyType = "ENSEMBL",
ont = "BP",
pAdjustMethod = "BH",
pvalueCutoff = 0.01,
qvalueCutoff = 0.05)
GO_BP
goplot(GO_BP)
# GO enrichment - Molecular Function
GO_MF =  enrichGO(gene = gene.df$ENSEMBL,
OrgDb = org.Mm.eg.db,
keyType = "ENSEMBL",
ont = "MF",
pAdjustMethod = "BH",
pvalueCutoff = 0.01,
qvalueCutoff = 0.05)
GO_MF
# Reactome Pathway enrichment
pathway = enrichPathway(gene.df$ENTREZID ,
organism = "mouse",
pAdjustMethod = "BH",
pvalueCutoff = 0.01,
readable=TRUE)
as.data.frame(pathway) %>%
ggplot(aes(y =Description, x=p.adjust, fill = p.adjust))+
geom_col() +
theme_bw()
GOI = FearCondvControl$SYMBOL[FearCondvControl$sig %in% "DOWN"]
# converting IDs
gene.df = bitr(GOI, fromType = "SYMBOL", toType = c("ENSEMBL", "SYMBOL", "ENTREZID"), OrgDb = org.Mm.eg.db)
gene.df
#GO Enrichemnt - Cellular Component
GO_CC =  enrichGO(gene = gene.df$ENSEMBL,
OrgDb = org.Mm.eg.db,
keyType = "ENSEMBL",
ont = "CC",
pAdjustMethod = "BH",
pvalueCutoff = 0.01,
qvalueCutoff = 0.05)
#goplot(GO_CC)
GO_CC
goplot(GO_CC)
# GO enrichment - Biological Process
GO_BP =  enrichGO(gene = gene.df$ENSEMBL,
OrgDb = org.Mm.eg.db,
keyType = "ENSEMBL",
ont = "BP",
pAdjustMethod = "BH",
pvalueCutoff = 0.01,
qvalueCutoff = 0.05)
goplot(GO_BP)
# GO enrichment - Molecular Function
GO_MF =  enrichGO(gene = gene.df$ENSEMBL,
OrgDb = org.Mm.eg.db,
keyType = "ENSEMBL",
ont = "MF",
pAdjustMethod = "BH",
pvalueCutoff = 0.01,
qvalueCutoff = 0.05)
goplot(GO_MF)
# Reactome Pathway enrichment
pathway = enrichPathway(gene.df$ENTREZID ,
organism = "mouse",
pAdjustMethod = "BH",
pvalueCutoff = 0.01,
readable=TRUE)
as.data.frame(pathway) %>%
ggplot(aes(y =Description, x=p.adjust, fill = p.adjust))+
geom_col() +
theme_bw()
mat
cor.mat = cor(mat, method = "spearman")
corrplot(cor.mat)
library(corrplot
)
corrplot(cor.mat)
corrplot(cor.mat, order = "hclust")
corrplot(cor.mat, order = "hclust", method = "square", type = "lower")
cor.mat = cor(t(mat), method = "spearman")
corrplot(cor.mat, order = "hclust", method = "square", type = "lower")
cor.mat = cor(t(mat), method = "spearman")
corrplot(cor.mat, order = "hclust", method = "square", type = "lower")
GOI = FearCondvControl$SYMBOL[FearCondvControl$sig %in% c("UP", "DOWN")]
GOI = FearCondvControl$SYMBOL[FearCondvControl$sig %in% c("UP", "DOWN")]
# converting IDs
gene.df = bitr(GOI, fromType = "SYMBOL", toType = c("ENSEMBL", "SYMBOL", "ENTREZID"), OrgDb = org.Mm.eg.db)
gene.df
#GO Enrichemnt - Cellular Component
GO_CC =  enrichGO(gene = gene.df$ENSEMBL,
OrgDb = org.Mm.eg.db,
keyType = "ENSEMBL",
ont = "CC",
pAdjustMethod = "BH",
pvalueCutoff = 0.01,
qvalueCutoff = 0.05)
goplot(GO_CC)
# GO enrichment - Biological Process
GO_BP =  enrichGO(gene = gene.df$ENSEMBL,
OrgDb = org.Mm.eg.db,
keyType = "ENSEMBL",
ont = "BP",
pAdjustMethod = "BH",
pvalueCutoff = 0.01,
qvalueCutoff = 0.05)
goplot(GO_BP)
# GO enrichment - Molecular Function
GO_MF =  enrichGO(gene = gene.df$ENSEMBL,
OrgDb = org.Mm.eg.db,
keyType = "ENSEMBL",
ont = "MF",
pAdjustMethod = "BH",
pvalueCutoff = 0.01,
qvalueCutoff = 0.05)
goplot(GO_MF)
mat
counts(dds)
w = genes.filt %in% "CREB"
any(genes.filt %in% "CREB")
any(genes.filt %in% "Creb")
any(genes.filt %in% "Creb")
any(genes.filt %in% "Creb1")
w = genes.filt %in% "Creb1"
mat[w,]
creb_across_samples = mat[w,]
cbind(creb_across_samples, t(mat[1,]))
rep(mat[w, 1], nrow(mat))
cor(rep(mat[w, 1], nrow(mat)), mat[,1], method = "spearman")
cor(mat[w, 1], mat[1,1], method = "spearman")
cor(mat[, 1], mat[,1], method = "spearman")
cor(mat[,1], method = "spearman")
library(WGCNA)
install.packages("impute")
